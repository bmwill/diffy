searchState.loadedDescShard("diffy", 0, "Tools for finding and manipulating differences between …\nAn error returned when <code>apply</code>ing a <code>Patch</code> fails\nStyle used when rendering a conflict\nA line providing context in the diff which is present in …\nA line deleted from the old file\nRenders conflicting lines from both files including lines …\nA collection of options for modifying the way a diff is …\nRepresents a group of differing lines between two files\nThe range of lines in a file for a particular <code>Hunk</code>.\nA line inserted to the new file\nA line in either the old file, new file, or both.\nRenders conflicting lines from both files, separated by …\nA collection of options for modifying the way a merge is …\nAn error returned when parsing a <code>Patch</code> using …\nRepresentation of all the differences between two files\nStruct used to adjust the formatting of a <code>Patch</code>\nApply a <code>Patch</code> to a base image\nApply a non-utf8 <code>Patch</code> to a base image\nCreate a patch between two texts.\nProduce a Patch between two texts based on the configured …\nCreate a patch between two potentially non-utf8 texts\nCreate a patch between two potentially non-utf8 texts\nReturns the ending line number of the range (exclusive)\nReturns a <code>Display</code> impl which can be used to print a Patch\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse a <code>Patch</code> from bytes\nParse a <code>Patch</code> from a string\nReturns the function context (if any) for the hunk\nReturns the hunks in the patch\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the range is empty (has a length of <code>0</code>)\nReturns the number of lines in the range\nReturns the lines in the hunk\nMerge two files given a common ancestor.\nMerge two files, given a common ancestor, based on the …\nPerform a 3-way merge between potentially non-utf8 texts\nPerform a 3-way merge between potentially non-utf8 texts\nSets whether to format a patch with a “No newline at end …\nReturn the name of the new file\nConstruct a new <code>DiffOptions</code> with default settings\nConstructs a new <code>MergeOptions</code> with default settings\nConstruct a new formatter\nReturns the corresponding range for the new file in the …\nReturns the corresponding range for the old file in the …\nReturn the name of the old file\nReturns the range as a <code>ops::Range</code>\nCreates a reverse patch for the hunk.  This is equivalent …\nSet the length of the conflict markers used when …\nSet the conflict style used when displaying a merge …\nSet the number of context lines that should be used when …\nSet the filename to be used in the patch for the modified …\nSet the filename to be used in the patch for the original …\nReturns the starting line number of the range (inclusive)\nSets whether to suppress printing of a space before empty …\nConvert a <code>Patch</code> into bytes\nEnable formatting a patch with color")